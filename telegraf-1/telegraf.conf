# Configuration for telegraf 
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  #round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 3000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 6000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "10ms"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "1000ms"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "20ms"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = "1ms"

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = ""

  ## Override default hostname, if empty use os.Hostname()
 # hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  #omit_hostname = false 
  #debug = true

[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  #urls = ["http://172.17.64.1:8086"]
  urls=["$INFLUX_URL1"]
  ## Token for authentication.
  token="$INFLUX_TOKEN1"
  ## Organization is the name of the organization you wish to write to; must exist.
  organization="$INFLUX_ORG"
  ## Destination bucket to write into.
  bucket="$INFLUX_BUCKET"

  ## The value of this tag will be used to determine the bucket.  If this
  ## tag is not set the 'bucket' option is used as the default.
  #bucket_tag = "weather2"

  ## If true, the bucket tag will not be added to the metric.
  #exclude_bucket_tag = false

  ## Timeout for HTTP messages.
  #timeout = "12s"

  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"

  ## HTTP User-Agent
  #user_agent = "telegraf"

  ## Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "gzip"
#content_encoding = "identity"
  ## Enable or disable uint support for writing uints influxdb 2.0.
  # influx_uint_support = false

  ## Optional TLS Config for use on HTTP connections.
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false
# Read current weather and forecasts data from openweathermap.org
  #debug = true
[[outputs.file]]
  files = ["stdout"]
  interval = "60s"
#[[inputs.openweathermap]]
  ## OpenWeatherMap API key.
  #app_id = "03111eacaf7d8d1a4f6b3dad1e9907bf"
  
  #app_id = "$OPEN_API_KEY"
  
  ## City ID's to collect weather data from.
  
  #city_id = ["3094802"]
  
  ## Language of the description field. Can be one of "ar", "bg",
  ## "ca", "cz", "de", "el", "en", "fa", "fi", "fr", "gl", "hr", "hu",
  ## "it", "ja", "kr", "la", "lt", "mk", "nl", "pl", "pt", "ro", "ru",
  ## "se", "sk", "sl", "es", "tr", "ua", "vi", "zh_cn", "zh_tw"
  
  #lang = "pl"

  ## APIs to fetch; can contain "weather" or "forecast".
  #fetch = ["weather", "forecast"]
  #fetch = ["weather"]
  #fetch = ["lat={lat}", "lot={lot}"]

  # fetch = ["weather", "forecast"]
  ## OpenWeatherMap base URL
  #base_url = "https://api.openweathermap.org/"
  #base_url = "https://api.openweathermap.org/data/2.5/weather/"
  #base_url = "https://api.openweathermap.org/"
  ## Timeout for HTTP response.
  #response_timeout = "20s"

  ## Preferred unit system for temperature and wind speed. Can be one of
  ## "metric", "imperial", or "standard".
  #  units = "metric"
  ## Query interval; OpenWeatherMap weather data is updated every 10
  ## minutes.
  
# Read current weather and forecasts data from openweathermap.org
# Collect statistics about itself
[[inputs.http]]  
  #urls = ["https://api.openweathermap.org/data/2.5/weather?q=london&appid=$OPEN_API_KEY&units=metric"]
  urls = ["https://api.openweathermap.org/data/2.5/weather?lat=$jedrzejow_lat&lon=$jedrzejow_lon&appid=$OPEN_API_KEY&units=metric"]
  tagexclude = ["url", "host"]
  data_format = "json_v2"
  [[inputs.http.json_v2]]
      measurement_name = "andr_n00001"    
      [[inputs.http.json_v2.tag]]
          path = "name"
          rename = "city"    
      [[inputs.http.json_v2.tag]]
          path = "id"         
      [[inputs.http.json_v2.field]]
          path = "weather.#.main"
          rename = "summary"
      [[inputs.http.json_v2.field]]
          path = "main.temp"
          type = "int"
      [[inputs.http.json_v2.field]]
          path = "wind.speed"
          rename = "wind_speed"
      [[inputs.http.json_v2.field]]
          path = "coord.lon"
      [[inputs.http.json_v2.field]]
          path = "coord.lat"
  interval = "20s"


[[inputs.internal]]
  ## If true, collect telegraf memory stats.
  # collect_memstats = true
  interval = "60s"
[[inputs.system]]
  # no configuration
  interval = "60s"
